#libraries
library("matrixTests") 
library("ggrepel") 
library("enrichR") 
library("cowplot") 
library("ggplot2") 
library("MASS") 
library("ggvenn") 
library("gplots") 
library("DESeq2") 
library("dplyr")
library(EnhancedVolcano)

#setting working directory and creating data table
setwd("~/R/sorbonne_transcriptomics/project")
data = read.delim("./02_data/Project-SARSHuman.txt")

#labeling the data
idx_h1n1 = grepl("H1N1",colnames(data))
idx_sars_bat = grepl("SARS.BatSRBD",colnames(data))
idx_sars_cov = grepl("SARS.Cov",colnames(data))
idx_sars_dorf = grepl("SARS.dORF6",colnames(data))
idx_mock = grepl("mock",colnames(data))

data_h1n1 = data[, c(which(idx_h1n1), which(idx_mock))]
data_sars_bat = data[, c(which(idx_sars_bat), which(idx_mock))]
data_sars_cov = data[, c(which(idx_sars_cov), which(idx_mock))]
data_sars_dorf = data[, c(which(idx_sars_dorf), which(idx_mock))]

#function for DE analysis

DE = function(data, dataset_name){
  sample_names <- colnames(data)
  timepoint <- sapply(sample_names, function(x) strsplit(x, "_")[[1]][2]) # Second part is timepoint (e.g., 00h)
  
  metadata <- data.frame(timepoint)
  metadata$type<- as.vector(sapply(sample_names,function(x) paste(strsplit(x,"\\_")[[1]][1],collapse="_")))
  metadata$type <- factor(metadata$type)
  metadata$timepoint <- factor(metadata$timepoint)
  metadata$type <- relevel(metadata$type, ref = "mock")
  rownames(metadata) <- sample_names  
  dds <- DESeqDataSetFromMatrix(countData = round(data), colData = metadata, design = ~type)
  dds <- DESeq(dds)
  colnames(dds)
  result_table <- data.frame() 
  # Create a PDF to Save Volcano Plots
  pdf(paste("volcano_plots_", dataset_name, ".pdf", width = 8, height = 6))
  
  # Loop Through Timepoints
  for (tp in unique(metadata$timepoint[metadata$type == dataset_name])) {
    dds_subset <- dds[, metadata$timepoint == tp]
    dds_subset <- DESeq(dds_subset)
    # Perform the comparison
    res <- results(dds_subset, contrast = c("type", dataset_name, "mock"))
    # Extract significant genes (adjusted p-value < 0.05 and |log2FoldChange| > 1)
    res <- res[!is.na(res$padj) & !is.na(res$log2FoldChange), ]
    sig_genes <- res[res$padj < 0.05 & abs(res$log2FoldChange) > 1, ]
    sig_genes$timepoint <- tp
    sig_genes$dataset <- dataset_name
    result_table <- rbind(result_table, data.frame(
      gene = rownames(sig_genes),
      fold_change = sig_genes$log2FoldChange,
      p_value_adj = sig_genes$padj,
      timepoint = sig_genes$timepoint,
      dataset = sig_genes$dataset
    ))
    # Plot Volcano Plot
    volcano <- EnhancedVolcano(
      res,
      lab = rownames(res),
      x = 'log2FoldChange',
      y = 'padj',
      title = paste("Volcano Plot:",dataset_name, "_", tp),
      pCutoff = 0.05,
      FCcutoff = 1.0,
      pointSize = 2.0,
      labSize = 3.0,
      drawConnectors = TRUE,
      max.overlaps = 10,
      col = c('grey30', 'forestgreen', 'royalblue', 'red2')
    )
    
    # Print to the PDF
    print(volcano)
  }
  dev.off()
   return(result_table)
  
}

#DGE with the created function
genes_h1n1 = DE(data_h1n1,"H1N1" )
genes_sars_bat = DE(data_sars_bat,"SARS.BatSRBD" )
genes_sars_cov = DE(data_sars_cov,"SARS.Cov" )
genes_sars_dorf = DE(data_sars_dorf,"SARS.dORF6" )


# Combine all tables into one
all_results = list(genes_h1n1, genes_sars_bat, genes_sars_cov, genes_sars_dorf)
combined_table <- do.call(rbind, all_results)
combined_table$direction = ifelse(combined_table$fold_change > 0, "Upregulated", "Downregulated")
# Save the combined table to CSV
write.csv(combined_table, "combined_results.csv", row.names = FALSE)
